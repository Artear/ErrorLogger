<?php

namespace ErrorLoggerTest;

use ErrorLogger\BugsnagLogger;
use ErrorLogger\ErrorHandler;
use ErrorLogger\ErrorHandlerHelper;
use ErrorLogger\ExceptionFormatter;
use ErrorLogger\OnScreenLogger;
use ErrorLogger\ServerLogger;
use PHPUnit_Framework_TestCase;
use Prophecy\Exception\Exception;

class ErrorHandlerTest extends PHPUnit_Framework_TestCase {

  /**
   * @var \ErrorLogger\ErrorHandler;
   */
  private $errorHandler;

  public function setUp() {
    $this->errorHandler = new ErrorHandler();
  }

  /**
   * Test the Methods
   */
  public function testErrorHandlerMethods() {
    $this->assertTrue(method_exists($this->errorHandler, 'addLogger'));
    $this->assertTrue(method_exists($this->errorHandler, 'dieOnError'));
    $this->assertTrue(method_exists($this->errorHandler, 'getErrors'));
    $this->assertTrue(method_exists($this->errorHandler, 'onError'));
  }

  public function testAddLogger() {
    $this->assertInstanceOf(ErrorHandler::class, $this->errorHandler->addLogger(new ServerLogger()));
  }

  public function testDieOnError() {
    $this->assertInstanceOf(ErrorHandler::class, $this->errorHandler->dieOnError(TRUE));
  }

  public function testOnError() {
    $this->assertInstanceOf(ErrorHandler::class, $this->errorHandler->onError(new \Exception()));

    $bugsnagMock = $this->getMockBuilder(BugsnagLogger::class)
      ->setConstructorArgs(array("ApiKeyMock"))
      ->setMethods(array('notifyError'))
      ->getMock();

    $bugsnagMock->expects($this->once())
      ->method('notifyError')
      ->willReturn(TRUE);

    $this->errorHandler->addLogger($bugsnagMock);

    $this->errorHandler->onError(new \Exception("error"));
  }

  /**
   * @expectedException \ErrorException
   */
  public function testErrorException() {
    $this->errorHandler->dieOnError(TRUE)
      ->onError(new \Exception("Error Mock"));
  }

  public function testGetErrors() {
    $this->assertInternalType('array', $this->errorHandler->getErrors());
  }

  public function testErrorHandlerHelper() {
    ErrorHandlerHelper::autoConfigure($this->errorHandler);
  }

  public function testExceptionFormatter() {
    $this->assertTrue(is_string(ExceptionFormatter::prettify(new \Exception("error"))));
  }

  public function testGetCallStackHtml() {
    $this->assertTrue(is_string(ExceptionFormatter::getCallStackHtml(new \Exception("error"))));
  }

  public function testOnScreenLogger() {
    $screenLogger = new OnScreenLogger();
    $screenLogger->logError(new \Exception("error"));
  }

  public function testServerLogger() {
    $serverLogger = new ServerLogger();

    $serverLogger->logError(new \Exception("error"));
  }

  protected function tearDown() {
    parent::tearDown(); // TODO: Change the autogenerated stub
  }

}